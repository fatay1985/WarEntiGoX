@model IEnumerable<WarEntiGox.Models.Product>

@{
    ViewData["Title"] = "Ürünler";
    var categoryDict = ViewData["CategoryDict"] as Dictionary<string, string>;
    var companyDict = ViewData["CompanyDict"] as Dictionary<int, string>; // Company dictionary for displaying company names

    // Eğer categoryDict veya companyDict null ise, hata mesajı göster
    if (categoryDict == null || companyDict == null)
    {
        <p><strong>Hata:</strong> Kategori veya Şirket verisi bulunamadı.</p>
    }
}

<h1>Ürünler</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Yeni Ürün</a>
</p>

<form method="get">
    <div class="form-group">
        <input type="text" name="searchTerm" value="@ViewData["CurrentFilter"]" placeholder="Ürün Ara" class="form-control" />
        <button type="submit" class="btn btn-primary">Ara</button>
    </div>
</form>

@if (Model != null && Model.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.First().Name)</th>
            <th>@Html.DisplayNameFor(model => model.First().Price)</th>
            <th>@Html.DisplayNameFor(model => model.First().StockQuantity)</th>
            <th>@Html.DisplayNameFor(model => model.First().SKU)</th>
            <th>@Html.DisplayNameFor(model => model.First().Description)</th>
            <th>Kategori</th>
            <th>Şirket</th>  <!-- Company column added -->
            <th>@Html.DisplayNameFor(model => model.First().CreateDate)</th>
            <th>@Html.DisplayNameFor(model => model.First().UpdateDate)</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => product.Name)</td>
                <td>@Html.DisplayFor(modelItem => product.Price)</td>
                <td>@Html.DisplayFor(modelItem => product.StockQuantity)</td>
                <td>@Html.DisplayFor(modelItem => product.SKU)</td>
                <td>@Html.DisplayFor(modelItem => product.Description)</td>

                <!-- Kategori adı gösterimi -->
                <td>@(product.CategoryId != null && categoryDict != null && categoryDict.ContainsKey(product.CategoryId.ToString()) 
                    ? categoryDict[product.CategoryId.ToString()] 
                    : "Belirtilmemiş")</td>

                <!-- Şirket adı gösterimi -->
                <td>@(companyDict != null && companyDict.ContainsKey(product.CompanyId) 
                    ? companyDict[product.CompanyId] 
                    : "Belirtilmemiş")</td>  <!-- CompanyId'yi gösterdik -->

                <td>@product.CreateDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                @if (product.UpdateDate.HasValue)
                {
                    <td>@product.UpdateDate.Value.ToString("yyyy-MM-dd HH:mm:ss")</td>
                }
                else
                {
                    <td></td>
                }
                <td>
                    <a asp-action="Edit" asp-route-id="@product.Id" class="btn btn-warning">Düzenle</a> |
                    <a asp-action="Delete" asp-route-id="@product.Id" class="btn btn-danger">Sil</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Ürün bulunamadı.</p>
}
